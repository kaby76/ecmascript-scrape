SourceCharacter :  any Unicode code point ;

InputElementDiv :  WhiteSpace  |  LineTerminator  |  Comment  |  CommonToken  |  DivPunctuator  |  RightBracePunctuator ;

InputElementRegExp :  WhiteSpace  |  LineTerminator  |  Comment  |  CommonToken  |  RightBracePunctuator  |  RegularExpressionLiteral ;

InputElementRegExpOrTemplateTail :  WhiteSpace  |  LineTerminator  |  Comment  |  CommonToken  |  RegularExpressionLiteral  |  TemplateSubstitutionTail ;

InputElementTemplateTail :  WhiteSpace  |  LineTerminator  |  Comment  |  CommonToken  |  DivPunctuator  |  TemplateSubstitutionTail ;

WhiteSpace :  &lt;TAB&gt;  |  &lt;VT&gt;  |  &lt;FF&gt;  |  &lt;ZWNBSP&gt;  |  &lt;USP&gt; ;

LineTerminator :  &lt;LF&gt;  |  &lt;CR&gt;  |  &lt;LS&gt;  |  &lt;PS&gt; ;

LineTerminatorSequence :  &lt;LF&gt;  |  &lt;CR&gt; /* [lookahead ≠ &lt;LF&gt;] */  |  &lt;LS&gt;  |  &lt;PS&gt;  |  &lt;CR&gt; &lt;LF&gt; ;

Comment :  MultiLineComment  |  SingleLineComment ;

MultiLineComment :  '/*' MultiLineCommentChars? '*/' ;

MultiLineCommentChars :  MultiLineNotAsteriskChar MultiLineCommentChars?  |  '*' PostAsteriskCommentChars? ;

PostAsteriskCommentChars :  MultiLineNotForwardSlashOrAsteriskChar MultiLineCommentChars?  |  '*' PostAsteriskCommentChars? ;

MultiLineNotAsteriskChar :  SourceCharacter /* but not * */ ;

MultiLineNotForwardSlashOrAsteriskChar :  SourceCharacter /* but not one of / or * */ ;

SingleLineComment :  '//' SingleLineCommentChars? ;

SingleLineCommentChars :  SingleLineCommentChar SingleLineCommentChars? ;

SingleLineCommentChar :  SourceCharacter /* but not LineTerminator */ ;

CommonToken :  IdentifierName  |  PrivateIdentifier  |  Punctuator  |  NumericLiteral  |  StringLiteral  |  Template ;

PrivateIdentifier :  '#' IdentifierName ;

IdentifierName :  IdentifierStart  |  IdentifierName IdentifierPart ;

IdentifierStart :  IdentifierStartChar  |  '\' UnicodeEscapeSequence ;

IdentifierPart :  IdentifierPartChar  |  '\' UnicodeEscapeSequence ;

IdentifierStartChar :  UnicodeIDStart  |  '$'  |  '_' ;

IdentifierPartChar :  UnicodeIDContinue  |  '$'  |  &lt;ZWNJ&gt;  |  &lt;ZWJ&gt; ;

UnicodeIDStart :  any Unicode code point with the Unicode property “ID_Start” ;

UnicodeIDContinue :  any Unicode code point with the Unicode property “ID_Continue” ;

ReservedWord : 'await' 'break' 'case' 'catch' 'class' 'const' 'continue' 'debugger' 'default' 'delete' 'do' 'else' 'enum' 'export' 'extends' 'false' 'finally' 'for' 'function' 'if' 'import' 'in' 'instanceof' 'new' 'null' 'return' 'super' 'switch' 'this' 'throw' 'true' 'try' 'typeof' 'var' 'void' 'while' 'with' 'yield';

Punctuator :  OptionalChainingPunctuator  |  OtherPunctuator ;

OptionalChainingPunctuator :  '?.' /* [lookahead ∉ DecimalDigit] */ ;

OtherPunctuator : '{' '(' ')' '[' ']' '.' '...' ';' ',' '&lt;' '&gt;' '&lt;=' '&gt;=' '==' '!=' '===' '!==' '+' '-' '*' '%' '**' '++' '--' '&lt;&lt;' '&gt;&gt;' '&gt;&gt;&gt;' '&amp;' '|' '^' '!' '~' '&amp;&amp;' '||' '??' '?' ':' '=' '+=' '-=' '*=' '%=' '**=' '&lt;&lt;=' '&gt;&gt;=' '&gt;&gt;&gt;=' '&amp;=' '|=' '^=' '&amp;&amp;=' '||=' '??=' '=&gt;';

DivPunctuator :  '/'  |  '/=' ;

RightBracePunctuator :  '}' ;

NullLiteral :  'null' ;

BooleanLiteral :  'true'  |  'false' ;

NumericLiteralSeparator :  '_' ;

NumericLiteral :  DecimalLiteral  |  DecimalBigIntegerLiteral  |  NonDecimalIntegerLiteral  |  NonDecimalIntegerLiteral BigIntLiteralSuffix  |  LegacyOctalIntegerLiteral ;

DecimalBigIntegerLiteral :  '0' BigIntLiteralSuffix  |  NonZeroDigit DecimalDigits BigIntLiteralSuffix  |  NonZeroDigit NumericLiteralSeparator DecimalDigits BigIntLiteralSuffix ;

NonDecimalIntegerLiteral :  BinaryIntegerLiteral  |  OctalIntegerLiteral  |  HexIntegerLiteral ;

BigIntLiteralSuffix :  'n' ;

DecimalLiteral :  DecimalIntegerLiteral '.' DecimalDigits ExponentPart  |  '.' DecimalDigits ExponentPart  |  DecimalIntegerLiteral ExponentPart ;

DecimalIntegerLiteral :  '0'  |  NonZeroDigit  |  NonZeroDigit NumericLiteralSeparator? DecimalDigits  |  NonOctalDecimalIntegerLiteral ;

DecimalDigits :  DecimalDigit  |  DecimalDigits DecimalDigit  | /* [+Sep] */ DecimalDigits NumericLiteralSeparator DecimalDigit ;

DecimalDigit : '0' '1' '2' '3' '4' '5' '6' '7' '8' '9';

NonZeroDigit : '1' '2' '3' '4' '5' '6' '7' '8' '9';

ExponentPart :  ExponentIndicator SignedInteger ;

ExponentIndicator : 'e' 'E';

SignedInteger :  DecimalDigits  |  '+' DecimalDigits  |  '-' DecimalDigits ;

BinaryIntegerLiteral :  '0b' BinaryDigits  |  '0B' BinaryDigits ;

BinaryDigits :  BinaryDigit  |  BinaryDigits BinaryDigit  | /* [+Sep] */ BinaryDigits NumericLiteralSeparator BinaryDigit ;

BinaryDigit : '0' '1';

OctalIntegerLiteral :  '0o' OctalDigits  |  '0O' OctalDigits ;

OctalDigits :  OctalDigit  |  OctalDigits OctalDigit  | /* [+Sep] */ OctalDigits NumericLiteralSeparator OctalDigit ;

LegacyOctalIntegerLiteral :  '0' OctalDigit  |  LegacyOctalIntegerLiteral OctalDigit ;

NonOctalDecimalIntegerLiteral :  '0' NonOctalDigit  |  LegacyOctalLikeDecimalIntegerLiteral NonOctalDigit  |  NonOctalDecimalIntegerLiteral DecimalDigit ;

LegacyOctalLikeDecimalIntegerLiteral :  '0' OctalDigit  |  LegacyOctalLikeDecimalIntegerLiteral OctalDigit ;

OctalDigit : '0' '1' '2' '3' '4' '5' '6' '7';

NonOctalDigit : '8' '9';

HexIntegerLiteral :  '0x' HexDigits  |  '0X' HexDigits ;

HexDigits :  HexDigit  |  HexDigits HexDigit  | /* [+Sep] */ HexDigits NumericLiteralSeparator HexDigit ;

HexDigit : '0' '1' '2' '3' '4' '5' '6' '7' '8' '9' 'a' 'b' 'c' 'd' 'e' 'f' 'A' 'B' 'C' 'D' 'E' 'F';

StringLiteral :  '"' DoubleStringCharacters? '"'  |  ''' SingleStringCharacters? ''' ;

DoubleStringCharacters :  DoubleStringCharacter DoubleStringCharacters? ;

SingleStringCharacters :  SingleStringCharacter SingleStringCharacters? ;

DoubleStringCharacter :  SourceCharacter /* but not one of " or \ or LineTerminator */  |  &lt;LS&gt;  |  &lt;PS&gt;  |  '\' EscapeSequence  |  LineContinuation ;

SingleStringCharacter :  SourceCharacter /* but not one of ' or \ or LineTerminator */  |  &lt;LS&gt;  |  &lt;PS&gt;  |  '\' EscapeSequence  |  LineContinuation ;

LineContinuation :  '\' LineTerminatorSequence ;

EscapeSequence :  CharacterEscapeSequence  |  '0' /* [lookahead ∉ DecimalDigit] */  |  LegacyOctalEscapeSequence  |  NonOctalDecimalEscapeSequence  |  HexEscapeSequence  |  UnicodeEscapeSequence ;

CharacterEscapeSequence :  SingleEscapeCharacter  |  NonEscapeCharacter ;

SingleEscapeCharacter : ''' '"' '\' 'b' 'f' 'n' 'r' 't' 'v';

NonEscapeCharacter :  SourceCharacter /* but not one of EscapeCharacter or LineTerminator */ ;

EscapeCharacter :  SingleEscapeCharacter  |  DecimalDigit  |  'x'  |  'u' ;

LegacyOctalEscapeSequence :  '0' /* [lookahead ∈ { 8, 9 }] */  |  NonZeroOctalDigit /* [lookahead ∉ OctalDigit] */  |  ZeroToThree OctalDigit /* [lookahead ∉ OctalDigit] */  |  FourToSeven OctalDigit  |  ZeroToThree OctalDigit OctalDigit ;

NonZeroOctalDigit :  OctalDigit /* but not 0 */ ;

ZeroToThree : '0' '1' '2' '3';

FourToSeven : '4' '5' '6' '7';

NonOctalDecimalEscapeSequence : '8' '9';

HexEscapeSequence :  'x' HexDigit HexDigit ;

UnicodeEscapeSequence :  'u' Hex4Digits  |  'u{' CodePoint '}' ;

Hex4Digits :  HexDigit HexDigit HexDigit HexDigit ;

RegularExpressionLiteral :  '/' RegularExpressionBody '/' RegularExpressionFlags ;

RegularExpressionBody :  RegularExpressionFirstChar RegularExpressionChars ;

RegularExpressionChars :  /* [empty] */  |  RegularExpressionChars RegularExpressionChar ;

RegularExpressionFirstChar :  RegularExpressionNonTerminator /* but not one of * or \ or / or [ */  |  RegularExpressionBackslashSequence  |  RegularExpressionClass ;

RegularExpressionChar :  RegularExpressionNonTerminator /* but not one of \ or / or [ */  |  RegularExpressionBackslashSequence  |  RegularExpressionClass ;

RegularExpressionBackslashSequence :  '\' RegularExpressionNonTerminator ;

RegularExpressionNonTerminator :  SourceCharacter /* but not LineTerminator */ ;

RegularExpressionClass :  '[' RegularExpressionClassChars ']' ;

RegularExpressionClassChars :  /* [empty] */  |  RegularExpressionClassChars RegularExpressionClassChar ;

RegularExpressionClassChar :  RegularExpressionNonTerminator /* but not one of ] or \ */  |  RegularExpressionBackslashSequence ;

RegularExpressionFlags :  /* [empty] */  |  RegularExpressionFlags IdentifierPartChar ;

Template :  NoSubstitutionTemplate  |  TemplateHead ;

NoSubstitutionTemplate :  '`' TemplateCharacters? '`' ;

TemplateHead :  '`' TemplateCharacters? '${' ;

TemplateSubstitutionTail :  TemplateMiddle  |  TemplateTail ;

TemplateMiddle :  '}' TemplateCharacters? '${' ;

TemplateTail :  '}' TemplateCharacters? '`' ;

TemplateCharacters :  TemplateCharacter TemplateCharacters? ;

TemplateCharacter :  '$' /* [lookahead ≠ {] */  |  '\' TemplateEscapeSequence  |  '\' NotEscapeSequence  |  LineContinuation  |  LineTerminatorSequence  |  SourceCharacter /* but not one of ` or \ or $ or LineTerminator */ ;

TemplateEscapeSequence :  CharacterEscapeSequence  |  '0' /* [lookahead ∉ DecimalDigit] */  |  HexEscapeSequence  |  UnicodeEscapeSequence ;

NotEscapeSequence :  '0' DecimalDigit  |  DecimalDigit /* but not 0 */  |  'x' /* [lookahead ∉ HexDigit] */  |  'x' HexDigit /* [lookahead ∉ HexDigit] */  |  'u' /* [lookahead ∉ HexDigit] */ /* [lookahead ≠ {] */  |  'u' HexDigit /* [lookahead ∉ HexDigit] */  |  'u' HexDigit HexDigit /* [lookahead ∉ HexDigit] */  |  'u' HexDigit HexDigit HexDigit /* [lookahead ∉ HexDigit] */  |  'u' '{' /* [lookahead ∉ HexDigit] */  |  'u' '{' NotCodePoint /* [lookahead ∉ HexDigit] */  |  'u' '{' CodePoint /* [lookahead ∉ HexDigit] */ /* [lookahead ≠ }] */ ;

NotCodePoint :  HexDigits /* but only if MV of HexDigits &gt; 0x10FFFF */ ;

CodePoint :  HexDigits /* but only if MV of HexDigits ≤ 0x10FFFF */ ;

IdentifierReference :  Identifier  | /* [~Yield] */ 'yield'  | /* [~Await] */ 'await' ;

BindingIdentifier :  Identifier  |  'yield'  |  'await' ;

LabelIdentifier :  Identifier  | /* [~Yield] */ 'yield'  | /* [~Await] */ 'await' ;

Identifier :  IdentifierName /* but not ReservedWord */ ;

PrimaryExpression :  'this'  |  IdentifierReference  |  Literal  |  ArrayLiteral  |  ObjectLiteral  |  FunctionExpression  |  ClassExpression  |  GeneratorExpression  |  AsyncFunctionExpression  |  AsyncGeneratorExpression  |  RegularExpressionLiteral  |  TemplateLiteral  |  CoverParenthesizedExpressionAndArrowParameterList ;

CoverParenthesizedExpressionAndArrowParameterList :  '(' Expression ')'  |  '(' Expression ',' ')'  |  '(' ')'  |  '(' '...' BindingIdentifier ')'  |  '(' '...' BindingPattern ')'  |  '(' Expression ',' '...' BindingIdentifier ')'  |  '(' Expression ',' '...' BindingPattern ')' ;

PrimaryExpression :  CoverParenthesizedExpressionAndArrowParameterList ;

ParenthesizedExpression :  '(' Expression ')' ;

Literal :  NullLiteral  |  BooleanLiteral  |  NumericLiteral  |  StringLiteral ;

ArrayLiteral :  '[' Elision? ']'  |  '[' ElementList ']'  |  '[' ElementList ',' Elision? ']' ;

ElementList :  Elision? AssignmentExpression  |  Elision? SpreadElement  |  ElementList ',' Elision? AssignmentExpression  |  ElementList ',' Elision? SpreadElement ;

Elision :  ','  |  Elision ',' ;

SpreadElement :  '...' AssignmentExpression ;

ObjectLiteral :  '{' '}'  |  '{' PropertyDefinitionList '}'  |  '{' PropertyDefinitionList ',' '}' ;

PropertyDefinitionList :  PropertyDefinition  |  PropertyDefinitionList ',' PropertyDefinition ;

PropertyDefinition :  IdentifierReference  |  CoverInitializedName  |  PropertyName ':' AssignmentExpression  |  MethodDefinition  |  '...' AssignmentExpression ;

PropertyName :  LiteralPropertyName  |  ComputedPropertyName ;

LiteralPropertyName :  IdentifierName  |  StringLiteral  |  NumericLiteral ;

ComputedPropertyName :  '[' AssignmentExpression ']' ;

CoverInitializedName :  IdentifierReference Initializer ;

Initializer :  '=' AssignmentExpression ;

TemplateLiteral :  NoSubstitutionTemplate  |  SubstitutionTemplate ;

SubstitutionTemplate :  TemplateHead Expression TemplateSpans ;

TemplateSpans :  TemplateTail  |  TemplateMiddleList TemplateTail ;

TemplateMiddleList :  TemplateMiddle Expression  |  TemplateMiddleList TemplateMiddle Expression ;

MemberExpression :  PrimaryExpression  |  MemberExpression '[' Expression ']'  |  MemberExpression '.' IdentifierName  |  MemberExpression TemplateLiteral  |  SuperProperty  |  MetaProperty  |  'new' MemberExpression Arguments  |  MemberExpression '.' PrivateIdentifier ;

SuperProperty :  'super' '[' Expression ']'  |  'super' '.' IdentifierName ;

MetaProperty :  NewTarget  |  ImportMeta ;

NewTarget :  'new' '.' 'target' ;

ImportMeta :  'import' '.' 'meta' ;

NewExpression :  MemberExpression  |  'new' NewExpression ;

CallExpression :  CoverCallExpressionAndAsyncArrowHead  |  SuperCall  |  ImportCall  |  CallExpression Arguments  |  CallExpression '[' Expression ']'  |  CallExpression '.' IdentifierName  |  CallExpression TemplateLiteral  |  CallExpression '.' PrivateIdentifier ;

CallExpression :  CoverCallExpressionAndAsyncArrowHead ;

CallMemberExpression :  MemberExpression Arguments ;

SuperCall :  'super' Arguments ;

ImportCall :  'import' '(' AssignmentExpression ')' ;

Arguments :  '(' ')'  |  '(' ArgumentList ')'  |  '(' ArgumentList ',' ')' ;

ArgumentList :  AssignmentExpression  |  '...' AssignmentExpression  |  ArgumentList ',' AssignmentExpression  |  ArgumentList ',' '...' AssignmentExpression ;

OptionalExpression :  MemberExpression OptionalChain  |  CallExpression OptionalChain  |  OptionalExpression OptionalChain ;

OptionalChain :  '?.' Arguments  |  '?.' '[' Expression ']'  |  '?.' IdentifierName  |  '?.' TemplateLiteral  |  '?.' PrivateIdentifier  |  OptionalChain Arguments  |  OptionalChain '[' Expression ']'  |  OptionalChain '.' IdentifierName  |  OptionalChain TemplateLiteral  |  OptionalChain '.' PrivateIdentifier ;

LeftHandSideExpression :  NewExpression  |  CallExpression  |  OptionalExpression ;

UpdateExpression :  LeftHandSideExpression  |  LeftHandSideExpression /* [no LineTerminator here] */ '++'  |  LeftHandSideExpression /* [no LineTerminator here] */ '--'  |  '++' UnaryExpression  |  '--' UnaryExpression ;

UnaryExpression :  UpdateExpression  |  'delete' UnaryExpression  |  'void' UnaryExpression  |  'typeof' UnaryExpression  |  '+' UnaryExpression  |  '-' UnaryExpression  |  '~' UnaryExpression  |  '!' UnaryExpression  | /* [+Await] */ AwaitExpression ;

ExponentiationExpression :  UnaryExpression  |  UpdateExpression '**' ExponentiationExpression ;

MultiplicativeExpression :  ExponentiationExpression  |  MultiplicativeExpression MultiplicativeOperator ExponentiationExpression ;

MultiplicativeOperator : '*' '/' '%';

AdditiveExpression :  MultiplicativeExpression  |  AdditiveExpression '+' MultiplicativeExpression  |  AdditiveExpression '-' MultiplicativeExpression ;

ShiftExpression :  AdditiveExpression  |  ShiftExpression '&lt;&lt;' AdditiveExpression  |  ShiftExpression '&gt;&gt;' AdditiveExpression  |  ShiftExpression '&gt;&gt;&gt;' AdditiveExpression ;

RelationalExpression :  ShiftExpression  |  RelationalExpression '&lt;' ShiftExpression  |  RelationalExpression '&gt;' ShiftExpression  |  RelationalExpression '&lt;=' ShiftExpression  |  RelationalExpression '&gt;=' ShiftExpression  |  RelationalExpression 'instanceof' ShiftExpression  | /* [+In] */ RelationalExpression 'in' ShiftExpression  | /* [+In] */ PrivateIdentifier 'in' ShiftExpression ;

EqualityExpression :  RelationalExpression  |  EqualityExpression '==' RelationalExpression  |  EqualityExpression '!=' RelationalExpression  |  EqualityExpression '===' RelationalExpression  |  EqualityExpression '!==' RelationalExpression ;

BitwiseANDExpression :  EqualityExpression  |  BitwiseANDExpression '&amp;' EqualityExpression ;

BitwiseXORExpression :  BitwiseANDExpression  |  BitwiseXORExpression '^' BitwiseANDExpression ;

BitwiseORExpression :  BitwiseXORExpression  |  BitwiseORExpression '|' BitwiseXORExpression ;

LogicalANDExpression :  BitwiseORExpression  |  LogicalANDExpression '&amp;&amp;' BitwiseORExpression ;

LogicalORExpression :  LogicalANDExpression  |  LogicalORExpression '||' LogicalANDExpression ;

CoalesceExpression :  CoalesceExpressionHead '??' BitwiseORExpression ;

CoalesceExpressionHead :  CoalesceExpression  |  BitwiseORExpression ;

ShortCircuitExpression :  LogicalORExpression  |  CoalesceExpression ;

ConditionalExpression :  ShortCircuitExpression  |  ShortCircuitExpression '?' AssignmentExpression ':' AssignmentExpression ;

AssignmentExpression :  ConditionalExpression  | /* [+Yield] */ YieldExpression  |  ArrowFunction  |  AsyncArrowFunction  |  LeftHandSideExpression '=' AssignmentExpression  |  LeftHandSideExpression AssignmentOperator AssignmentExpression  |  LeftHandSideExpression '&amp;&amp;=' AssignmentExpression  |  LeftHandSideExpression '||=' AssignmentExpression  |  LeftHandSideExpression '??=' AssignmentExpression ;

AssignmentOperator : '*=' '/=' '%=' '+=' '-=' '&lt;&lt;=' '&gt;&gt;=' '&gt;&gt;&gt;=' '&amp;=' '^=' '|=' '**=';

AssignmentExpression :  LeftHandSideExpression '=' AssignmentExpression ;

AssignmentPattern :  ObjectAssignmentPattern  |  ArrayAssignmentPattern ;

ObjectAssignmentPattern :  '{' '}'  |  '{' AssignmentRestProperty '}'  |  '{' AssignmentPropertyList '}'  |  '{' AssignmentPropertyList ',' AssignmentRestProperty '}' ;

ArrayAssignmentPattern :  '[' Elision? AssignmentRestElement ']'  |  '[' AssignmentElementList ']'  |  '[' AssignmentElementList ',' Elision? AssignmentRestElement ']' ;

AssignmentRestProperty :  '...' DestructuringAssignmentTarget ;

AssignmentPropertyList :  AssignmentProperty  |  AssignmentPropertyList ',' AssignmentProperty ;

AssignmentElementList :  AssignmentElisionElement  |  AssignmentElementList ',' AssignmentElisionElement ;

AssignmentElisionElement :  Elision? AssignmentElement ;

AssignmentProperty :  IdentifierReference Initializer  |  PropertyName ':' AssignmentElement ;

AssignmentElement :  DestructuringAssignmentTarget Initializer ;

AssignmentRestElement :  '...' DestructuringAssignmentTarget ;

DestructuringAssignmentTarget :  LeftHandSideExpression ;

Expression :  AssignmentExpression  |  Expression ',' AssignmentExpression ;

Statement :  BlockStatement  |  VariableStatement  |  EmptyStatement  |  ExpressionStatement  |  IfStatement  |  BreakableStatement  |  ContinueStatement  |  BreakStatement  | /* [+Return] */ ReturnStatement  |  WithStatement  |  LabelledStatement  |  ThrowStatement  |  TryStatement  |  DebuggerStatement ;

Declaration :  HoistableDeclaration  |  ClassDeclaration  |  LexicalDeclaration ;

HoistableDeclaration :  FunctionDeclaration  |  GeneratorDeclaration  |  AsyncFunctionDeclaration  |  AsyncGeneratorDeclaration ;

BreakableStatement :  IterationStatement  |  SwitchStatement ;

BlockStatement :  Block ;

Block :  '{' StatementList '}' ;

StatementList :  StatementListItem  |  StatementList StatementListItem ;

StatementListItem :  Statement  |  Declaration ;

LexicalDeclaration :  LetOrConst BindingList ';' ;

LetOrConst :  'let'  |  'const' ;

BindingList :  LexicalBinding  |  BindingList ',' LexicalBinding ;

LexicalBinding :  BindingIdentifier Initializer  |  BindingPattern Initializer ;

VariableStatement :  'var' VariableDeclarationList ';' ;

VariableDeclarationList :  VariableDeclaration  |  VariableDeclarationList ',' VariableDeclaration ;

VariableDeclaration :  BindingIdentifier Initializer  |  BindingPattern Initializer ;

BindingPattern :  ObjectBindingPattern  |  ArrayBindingPattern ;

ObjectBindingPattern :  '{' '}'  |  '{' BindingRestProperty '}'  |  '{' BindingPropertyList '}'  |  '{' BindingPropertyList ',' BindingRestProperty '}' ;

ArrayBindingPattern :  '[' Elision? BindingRestElement ']'  |  '[' BindingElementList ']'  |  '[' BindingElementList ',' Elision? BindingRestElement ']' ;

BindingRestProperty :  '...' BindingIdentifier ;

BindingPropertyList :  BindingProperty  |  BindingPropertyList ',' BindingProperty ;

BindingElementList :  BindingElisionElement  |  BindingElementList ',' BindingElisionElement ;

BindingElisionElement :  Elision? BindingElement ;

BindingProperty :  SingleNameBinding  |  PropertyName ':' BindingElement ;

BindingElement :  SingleNameBinding  |  BindingPattern Initializer ;

SingleNameBinding :  BindingIdentifier Initializer ;

BindingRestElement :  '...' BindingIdentifier  |  '...' BindingPattern ;

EmptyStatement :  ';' ;

ExpressionStatement :  /* [lookahead ∉ { {, function, async
        [no LineTerminator here]
        function, class, let
        [ }] */ Expression ';' ;

IfStatement :  'if' '(' Expression ')' Statement 'else' Statement  |  'if' '(' Expression ')' Statement /* [lookahead ≠ else] */ ;

IterationStatement :  DoWhileStatement  |  WhileStatement  |  ForStatement  |  ForInOfStatement ;

DoWhileStatement :  'do' Statement 'while' '(' Expression ')' ';' ;

WhileStatement :  'while' '(' Expression ')' Statement ;

ForStatement :  'for' '(' /* [lookahead ≠ let
        [] */ Expression ';' Expression ';' Expression ')' Statement  |  'for' '(' 'var' VariableDeclarationList ';' Expression ';' Expression ')' Statement  |  'for' '(' LexicalDeclaration Expression ';' Expression ')' Statement ;

ForInOfStatement :  'for' '(' /* [lookahead ≠ let
        [] */ LeftHandSideExpression 'in' Expression ')' Statement  |  'for' '(' 'var' ForBinding 'in' Expression ')' Statement  |  'for' '(' ForDeclaration 'in' Expression ')' Statement  |  'for' '(' /* [lookahead ∉ { let, async
        of }] */ LeftHandSideExpression 'of' AssignmentExpression ')' Statement  |  'for' '(' 'var' ForBinding 'of' AssignmentExpression ')' Statement  |  'for' '(' ForDeclaration 'of' AssignmentExpression ')' Statement  | /* [+Await] */ 'for' 'await' '(' /* [lookahead ≠ let] */ LeftHandSideExpression 'of' AssignmentExpression ')' Statement  | /* [+Await] */ 'for' 'await' '(' 'var' ForBinding 'of' AssignmentExpression ')' Statement  | /* [+Await] */ 'for' 'await' '(' ForDeclaration 'of' AssignmentExpression ')' Statement ;

ForDeclaration :  LetOrConst ForBinding ;

ForBinding :  BindingIdentifier  |  BindingPattern ;

ContinueStatement :  'continue' ';'  |  'continue' /* [no LineTerminator here] */ LabelIdentifier ';' ;

BreakStatement :  'break' ';'  |  'break' /* [no LineTerminator here] */ LabelIdentifier ';' ;

ReturnStatement :  'return' ';'  |  'return' /* [no LineTerminator here] */ Expression ';' ;

WithStatement :  'with' '(' Expression ')' Statement ;

SwitchStatement :  'switch' '(' Expression ')' CaseBlock ;

CaseBlock :  '{' CaseClauses '}'  |  '{' CaseClauses DefaultClause CaseClauses '}' ;

CaseClauses :  CaseClause  |  CaseClauses CaseClause ;

CaseClause :  'case' Expression ':' StatementList ;

DefaultClause :  'default' ':' StatementList ;

LabelledStatement :  LabelIdentifier ':' LabelledItem ;

LabelledItem :  Statement  |  FunctionDeclaration ;

ThrowStatement :  'throw' /* [no LineTerminator here] */ Expression ';' ;

TryStatement :  'try' Block Catch  |  'try' Block Finally  |  'try' Block Catch Finally ;

Catch :  'catch' '(' CatchParameter ')' Block  |  'catch' Block ;

Finally :  'finally' Block ;

CatchParameter :  BindingIdentifier  |  BindingPattern ;

DebuggerStatement :  'debugger' ';' ;

UniqueFormalParameters :  FormalParameters ;

FormalParameters :  /* [empty] */  |  FunctionRestParameter  |  FormalParameterList  |  FormalParameterList ','  |  FormalParameterList ',' FunctionRestParameter ;

FormalParameterList :  FormalParameter  |  FormalParameterList ',' FormalParameter ;

FunctionRestParameter :  BindingRestElement ;

FormalParameter :  BindingElement ;

FunctionDeclaration :  'function' BindingIdentifier '(' FormalParameters ')' '{' FunctionBody '}'  | /* [+Default] */ 'function' '(' FormalParameters ')' '{' FunctionBody '}' ;

FunctionExpression :  'function' BindingIdentifier '(' FormalParameters ')' '{' FunctionBody '}' ;

FunctionBody :  FunctionStatementList ;

FunctionStatementList :  StatementList ;

ArrowFunction :  ArrowParameters /* [no LineTerminator here] */ '=&gt;' ConciseBody ;

ArrowParameters :  BindingIdentifier  |  CoverParenthesizedExpressionAndArrowParameterList ;

ConciseBody :  /* [lookahead ≠ {] */ ExpressionBody  |  '{' FunctionBody '}' ;

ExpressionBody :  AssignmentExpression ;

ArrowParameters :  CoverParenthesizedExpressionAndArrowParameterList ;

ArrowFormalParameters :  '(' UniqueFormalParameters ')' ;

AsyncArrowFunction :  'async' /* [no LineTerminator here] */ AsyncArrowBindingIdentifier /* [no LineTerminator here] */ '=&gt;' AsyncConciseBody  |  CoverCallExpressionAndAsyncArrowHead /* [no LineTerminator here] */ '=&gt;' AsyncConciseBody ;

AsyncConciseBody :  /* [lookahead ≠ {] */ ExpressionBody  |  '{' AsyncFunctionBody '}' ;

AsyncArrowBindingIdentifier :  BindingIdentifier ;

CoverCallExpressionAndAsyncArrowHead :  MemberExpression Arguments ;

AsyncArrowFunction :  CoverCallExpressionAndAsyncArrowHead /* [no LineTerminator here] */ '=&gt;' AsyncConciseBody ;

AsyncArrowHead :  'async' /* [no LineTerminator here] */ ArrowFormalParameters ;

MethodDefinition :  ClassElementName '(' UniqueFormalParameters ')' '{' FunctionBody '}'  |  GeneratorMethod  |  AsyncMethod  |  AsyncGeneratorMethod  |  'get' ClassElementName '(' ')' '{' FunctionBody '}'  |  'set' ClassElementName '(' PropertySetParameterList ')' '{' FunctionBody '}' ;

PropertySetParameterList :  FormalParameter ;

GeneratorDeclaration :  'function' '*' BindingIdentifier '(' FormalParameters ')' '{' GeneratorBody '}'  | /* [+Default] */ 'function' '*' '(' FormalParameters ')' '{' GeneratorBody '}' ;

GeneratorExpression :  'function' '*' BindingIdentifier '(' FormalParameters ')' '{' GeneratorBody '}' ;

GeneratorMethod :  '*' ClassElementName '(' UniqueFormalParameters ')' '{' GeneratorBody '}' ;

GeneratorBody :  FunctionBody ;

YieldExpression :  'yield'  |  'yield' /* [no LineTerminator here] */ AssignmentExpression  |  'yield' /* [no LineTerminator here] */ '*' AssignmentExpression ;

AsyncGeneratorDeclaration :  'async' /* [no LineTerminator here] */ 'function' '*' BindingIdentifier '(' FormalParameters ')' '{' AsyncGeneratorBody '}'  | /* [+Default] */ 'async' /* [no LineTerminator here] */ 'function' '*' '(' FormalParameters ')' '{' AsyncGeneratorBody '}' ;

AsyncGeneratorExpression :  'async' /* [no LineTerminator here] */ 'function' '*' BindingIdentifier '(' FormalParameters ')' '{' AsyncGeneratorBody '}' ;

AsyncGeneratorMethod :  'async' /* [no LineTerminator here] */ '*' ClassElementName '(' UniqueFormalParameters ')' '{' AsyncGeneratorBody '}' ;

AsyncGeneratorBody :  FunctionBody ;

AsyncFunctionDeclaration :  'async' /* [no LineTerminator here] */ 'function' BindingIdentifier '(' FormalParameters ')' '{' AsyncFunctionBody '}'  | /* [+Default] */ 'async' /* [no LineTerminator here] */ 'function' '(' FormalParameters ')' '{' AsyncFunctionBody '}' ;

AsyncFunctionExpression :  'async' /* [no LineTerminator here] */ 'function' BindingIdentifier '(' FormalParameters ')' '{' AsyncFunctionBody '}' ;

AsyncMethod :  'async' /* [no LineTerminator here] */ ClassElementName '(' UniqueFormalParameters ')' '{' AsyncFunctionBody '}' ;

AsyncFunctionBody :  FunctionBody ;

AwaitExpression :  'await' UnaryExpression ;

ClassDeclaration :  'class' BindingIdentifier ClassTail  | /* [+Default] */ 'class' ClassTail ;

ClassExpression :  'class' BindingIdentifier ClassTail ;

ClassTail :  ClassHeritage '{' ClassBody '}' ;

ClassHeritage :  'extends' LeftHandSideExpression ;

ClassBody :  ClassElementList ;

ClassElementList :  ClassElement  |  ClassElementList ClassElement ;

ClassElement :  MethodDefinition  |  'static' MethodDefinition  |  FieldDefinition ';'  |  'static' FieldDefinition ';'  |  ClassStaticBlock  |  ';' ;

FieldDefinition :  ClassElementName Initializer ;

ClassElementName :  PropertyName  |  PrivateIdentifier ;

ClassStaticBlock :  'static' '{' ClassStaticBlockBody '}' ;

ClassStaticBlockBody :  ClassStaticBlockStatementList ;

ClassStaticBlockStatementList :  StatementList ;

Script :  ScriptBody? ;

ScriptBody :  StatementList ;

Module :  ModuleBody? ;

ModuleBody :  ModuleItemList ;

ModuleItemList :  ModuleItem  |  ModuleItemList ModuleItem ;

ModuleItem :  ImportDeclaration  |  ExportDeclaration  |  StatementListItem ;

ModuleExportName :  IdentifierName  |  StringLiteral ;

ImportDeclaration :  'import' ImportClause FromClause ';'  |  'import' ModuleSpecifier ';' ;

ImportClause :  ImportedDefaultBinding  |  NameSpaceImport  |  NamedImports  |  ImportedDefaultBinding ',' NameSpaceImport  |  ImportedDefaultBinding ',' NamedImports ;

ImportedDefaultBinding :  ImportedBinding ;

NameSpaceImport :  '*' 'as' ImportedBinding ;

NamedImports :  '{' '}'  |  '{' ImportsList '}'  |  '{' ImportsList ',' '}' ;

FromClause :  'from' ModuleSpecifier ;

ImportsList :  ImportSpecifier  |  ImportsList ',' ImportSpecifier ;

ImportSpecifier :  ImportedBinding  |  ModuleExportName 'as' ImportedBinding ;

ModuleSpecifier :  StringLiteral ;

ImportedBinding :  BindingIdentifier ;

ExportDeclaration :  'export' ExportFromClause FromClause ';'  |  'export' NamedExports ';'  |  'export' VariableStatement  |  'export' Declaration  |  'export' 'default' HoistableDeclaration  |  'export' 'default' ClassDeclaration  |  'export' 'default' /* [lookahead ∉ { function, async
        [no LineTerminator here]
        function, class }] */ AssignmentExpression ';' ;

ExportFromClause :  '*'  |  '*' 'as' ModuleExportName  |  NamedExports ;

NamedExports :  '{' '}'  |  '{' ExportsList '}'  |  '{' ExportsList ',' '}' ;

ExportsList :  ExportSpecifier  |  ExportsList ',' ExportSpecifier ;

ExportSpecifier :  ModuleExportName  |  ModuleExportName 'as' ModuleExportName ;

StringNumericLiteral :  StrWhiteSpace?  |  StrWhiteSpace? StrNumericLiteral StrWhiteSpace? ;

StrWhiteSpace :  StrWhiteSpaceChar StrWhiteSpace? ;

StrWhiteSpaceChar :  WhiteSpace  |  LineTerminator ;

StrNumericLiteral :  StrDecimalLiteral  |  NonDecimalIntegerLiteral ;

StrDecimalLiteral :  StrUnsignedDecimalLiteral  |  '+' StrUnsignedDecimalLiteral  |  '-' StrUnsignedDecimalLiteral ;

StrUnsignedDecimalLiteral :  'Infinity'  |  DecimalDigits '.' DecimalDigits ExponentPart  |  '.' DecimalDigits ExponentPart  |  DecimalDigits ExponentPart ;

StringIntegerLiteral :  StrWhiteSpace?  |  StrWhiteSpace? StrIntegerLiteral StrWhiteSpace? ;

StrIntegerLiteral :  SignedInteger  |  NonDecimalIntegerLiteral ;

uri :  uriCharacters? ;

uriCharacters :  uriCharacter uriCharacters? ;

uriCharacter :  uriReserved  |  uriUnescaped  |  uriEscaped ;

uriReserved : ';' '/' '?' ':' '@' '&amp;' '=' '+' '$' ',';

uriUnescaped :  uriAlpha  |  DecimalDigit  |  uriMark ;

uriEscaped :  '%' HexDigit HexDigit ;

uriAlpha : 'a' 'b' 'c' 'd' 'e' 'f' 'g' 'h' 'i' 'j' 'k' 'l' 'm' 'n' 'o' 'p' 'q' 'r' 's' 't' 'u' 'v' 'w' 'x' 'y' 'z' 'A' 'B' 'C' 'D' 'E' 'F' 'G' 'H' 'I' 'J' 'K' 'L' 'M' 'N' 'O' 'P' 'Q' 'R' 'S' 'T' 'U' 'V' 'W' 'X' 'Y' 'Z';

uriMark : '-' '_' '.' '!' '~' '*' ''' '(' ')';

Pattern :  Disjunction ;

Disjunction :  Alternative  |  Alternative '|' Disjunction ;

Alternative :  /* [empty] */  |  Alternative Term ;

Term :  Assertion  |  Atom  |  Atom Quantifier ;

Assertion :  '^'  |  '$'  |  '\' 'b'  |  '\' 'B'  |  '(' '?' '=' Disjunction ')'  |  '(' '?' '!' Disjunction ')'  |  '(' '?' '&lt;=' Disjunction ')'  |  '(' '?' '&lt;!' Disjunction ')' ;

Quantifier :  QuantifierPrefix  |  QuantifierPrefix '?' ;

QuantifierPrefix :  '*'  |  '+'  |  '?'  |  '{' DecimalDigits '}'  |  '{' DecimalDigits ',' '}'  |  '{' DecimalDigits ',' DecimalDigits '}' ;

Atom :  PatternCharacter  |  '.'  |  '\' AtomEscape  |  CharacterClass  |  '(' GroupSpecifier Disjunction ')'  |  '(' '?' ':' Disjunction ')' ;

SyntaxCharacter : '^' '$' '\' '.' '*' '+' '?' '(' ')' '[' ']' '{' '}' '|';

PatternCharacter :  SourceCharacter /* but not SyntaxCharacter */ ;

AtomEscape :  DecimalEscape  |  CharacterClassEscape  |  CharacterEscape  | /* [+N] */ 'k' GroupName ;

CharacterEscape :  ControlEscape  |  'c' ControlLetter  |  '0' /* [lookahead ∉ DecimalDigit] */  |  HexEscapeSequence  |  RegExpUnicodeEscapeSequence  |  IdentityEscape ;

ControlEscape : 'f' 'n' 'r' 't' 'v';

ControlLetter : 'a' 'b' 'c' 'd' 'e' 'f' 'g' 'h' 'i' 'j' 'k' 'l' 'm' 'n' 'o' 'p' 'q' 'r' 's' 't' 'u' 'v' 'w' 'x' 'y' 'z' 'A' 'B' 'C' 'D' 'E' 'F' 'G' 'H' 'I' 'J' 'K' 'L' 'M' 'N' 'O' 'P' 'Q' 'R' 'S' 'T' 'U' 'V' 'W' 'X' 'Y' 'Z';

GroupSpecifier :  /* [empty] */  |  '?' GroupName ;

GroupName :  '&lt;' RegExpIdentifierName '&gt;' ;

RegExpIdentifierName :  RegExpIdentifierStart  |  RegExpIdentifierName RegExpIdentifierPart ;

RegExpIdentifierStart :  IdentifierStartChar  |  '\' RegExpUnicodeEscapeSequence  | /* [~UnicodeMode] */ UnicodeLeadSurrogate UnicodeTrailSurrogate ;

RegExpIdentifierPart :  IdentifierPartChar  |  '\' RegExpUnicodeEscapeSequence  | /* [~UnicodeMode] */ UnicodeLeadSurrogate UnicodeTrailSurrogate ;

RegExpUnicodeEscapeSequence : /* [+UnicodeMode] */ 'u' HexLeadSurrogate '\u' HexTrailSurrogate  | /* [+UnicodeMode] */ 'u' HexLeadSurrogate  | /* [+UnicodeMode] */ 'u' HexTrailSurrogate  | /* [+UnicodeMode] */ 'u' HexNonSurrogate  | /* [~UnicodeMode] */ 'u' Hex4Digits  | /* [+UnicodeMode] */ 'u{' CodePoint '}' ;

UnicodeLeadSurrogate :  any Unicode code point in the inclusive range 0xD800 to 0xDBFF ;

UnicodeTrailSurrogate :  any Unicode code point in the inclusive range 0xDC00 to 0xDFFF ;

HexLeadSurrogate :  Hex4Digits /* but only if the MV of Hex4Digits is in the inclusive range 0xD800 to 0xDBFF */ ;

HexTrailSurrogate :  Hex4Digits /* but only if the MV of Hex4Digits is in the inclusive range 0xDC00 to 0xDFFF */ ;

HexNonSurrogate :  Hex4Digits /* but only if the MV of Hex4Digits is not in the inclusive range 0xD800 to 0xDFFF */ ;

IdentityEscape : /* [+UnicodeMode] */ SyntaxCharacter  | /* [+UnicodeMode] */ '/'  | /* [~UnicodeMode] */ SourceCharacter /* but not UnicodeIDContinue */ ;

DecimalEscape :  NonZeroDigit DecimalDigits /* [lookahead ∉ DecimalDigit] */ ;

CharacterClassEscape :  'd'  |  'D'  |  's'  |  'S'  |  'w'  |  'W'  | /* [+UnicodeMode] */ 'p{' UnicodePropertyValueExpression '}'  | /* [+UnicodeMode] */ 'P{' UnicodePropertyValueExpression '}' ;

UnicodePropertyValueExpression :  UnicodePropertyName '=' UnicodePropertyValue  |  LoneUnicodePropertyNameOrValue ;

UnicodePropertyName :  UnicodePropertyNameCharacters ;

UnicodePropertyNameCharacters :  UnicodePropertyNameCharacter UnicodePropertyNameCharacters? ;

UnicodePropertyValue :  UnicodePropertyValueCharacters ;

LoneUnicodePropertyNameOrValue :  UnicodePropertyValueCharacters ;

UnicodePropertyValueCharacters :  UnicodePropertyValueCharacter UnicodePropertyValueCharacters? ;

UnicodePropertyValueCharacter :  UnicodePropertyNameCharacter  |  DecimalDigit ;

UnicodePropertyNameCharacter :  ControlLetter  |  '_' ;

CharacterClass :  '[' /* [lookahead ≠ ^] */ ClassRanges ']'  |  '[' '^' ClassRanges ']' ;

ClassRanges :  /* [empty] */  |  NonemptyClassRanges ;

NonemptyClassRanges :  ClassAtom  |  ClassAtom NonemptyClassRangesNoDash  |  ClassAtom '-' ClassAtom ClassRanges ;

NonemptyClassRangesNoDash :  ClassAtom  |  ClassAtomNoDash NonemptyClassRangesNoDash  |  ClassAtomNoDash '-' ClassAtom ClassRanges ;

ClassAtom :  '-'  |  ClassAtomNoDash ;

ClassAtomNoDash :  SourceCharacter /* but not one of \ or ] or - */  |  '\' ClassEscape ;

ClassEscape :  'b'  | /* [+UnicodeMode] */ '-'  |  CharacterClassEscape  |  CharacterEscape ;

